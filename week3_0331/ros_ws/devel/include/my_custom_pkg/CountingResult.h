// Generated by gencpp from file my_custom_pkg/CountingResult.msg
// DO NOT EDIT!


#ifndef MY_CUSTOM_PKG_MESSAGE_COUNTINGRESULT_H
#define MY_CUSTOM_PKG_MESSAGE_COUNTINGRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_custom_pkg
{
template <class ContainerAllocator>
struct CountingResult_
{
  typedef CountingResult_<ContainerAllocator> Type;

  CountingResult_()
    : final_numbers()
    , result_message()  {
    }
  CountingResult_(const ContainerAllocator& _alloc)
    : final_numbers(_alloc)
    , result_message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _final_numbers_type;
  _final_numbers_type final_numbers;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _result_message_type;
  _result_message_type result_message;





  typedef boost::shared_ptr< ::my_custom_pkg::CountingResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_custom_pkg::CountingResult_<ContainerAllocator> const> ConstPtr;

}; // struct CountingResult_

typedef ::my_custom_pkg::CountingResult_<std::allocator<void> > CountingResult;

typedef boost::shared_ptr< ::my_custom_pkg::CountingResult > CountingResultPtr;
typedef boost::shared_ptr< ::my_custom_pkg::CountingResult const> CountingResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_custom_pkg::CountingResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_custom_pkg::CountingResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_custom_pkg::CountingResult_<ContainerAllocator1> & lhs, const ::my_custom_pkg::CountingResult_<ContainerAllocator2> & rhs)
{
  return lhs.final_numbers == rhs.final_numbers &&
    lhs.result_message == rhs.result_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_custom_pkg::CountingResult_<ContainerAllocator1> & lhs, const ::my_custom_pkg::CountingResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_custom_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_custom_pkg::CountingResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_custom_pkg::CountingResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_custom_pkg::CountingResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "943ce6579b0573eb104ddf192af3fcae";
  }

  static const char* value(const ::my_custom_pkg::CountingResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x943ce6579b0573ebULL;
  static const uint64_t static_value2 = 0x104ddf192af3fcaeULL;
};

template<class ContainerAllocator>
struct DataType< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_custom_pkg/CountingResult";
  }

  static const char* value(const ::my_custom_pkg::CountingResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"int32[] final_numbers\n"
"string result_message\n"
;
  }

  static const char* value(const ::my_custom_pkg::CountingResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final_numbers);
      stream.next(m.result_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CountingResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_custom_pkg::CountingResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_custom_pkg::CountingResult_<ContainerAllocator>& v)
  {
    s << indent << "final_numbers[]" << std::endl;
    for (size_t i = 0; i < v.final_numbers.size(); ++i)
    {
      s << indent << "  final_numbers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.final_numbers[i]);
    }
    s << indent << "result_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.result_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_CUSTOM_PKG_MESSAGE_COUNTINGRESULT_H
