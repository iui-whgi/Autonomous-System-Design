;; Auto-generated. Do not edit!


(when (boundp 'my_custom_pkg::CountingResult)
  (if (not (find-package "MY_CUSTOM_PKG"))
    (make-package "MY_CUSTOM_PKG"))
  (shadow 'CountingResult (find-package "MY_CUSTOM_PKG")))
(unless (find-package "MY_CUSTOM_PKG::COUNTINGRESULT")
  (make-package "MY_CUSTOM_PKG::COUNTINGRESULT"))

(in-package "ROS")
;;//! \htmlinclude CountingResult.msg.html


(defclass my_custom_pkg::CountingResult
  :super ros::object
  :slots (_final_numbers _result_message ))

(defmethod my_custom_pkg::CountingResult
  (:init
   (&key
    ((:final_numbers __final_numbers) (make-array 0 :initial-element 0 :element-type :integer))
    ((:result_message __result_message) "")
    )
   (send-super :init)
   (setq _final_numbers __final_numbers)
   (setq _result_message (string __result_message))
   self)
  (:final_numbers
   (&optional __final_numbers)
   (if __final_numbers (setq _final_numbers __final_numbers)) _final_numbers)
  (:result_message
   (&optional __result_message)
   (if __result_message (setq _result_message __result_message)) _result_message)
  (:serialization-length
   ()
   (+
    ;; int32[] _final_numbers
    (* 4    (length _final_numbers)) 4
    ;; string _result_message
    4 (length _result_message)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32[] _final_numbers
     (write-long (length _final_numbers) s)
     (dotimes (i (length _final_numbers))
       (write-long (elt _final_numbers i) s)
       )
     ;; string _result_message
       (write-long (length _result_message) s) (princ _result_message s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32[] _final_numbers
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _final_numbers (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _final_numbers i) (sys::peek buf ptr- :integer)) (incf ptr- 4)
     ))
   ;; string _result_message
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _result_message (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get my_custom_pkg::CountingResult :md5sum-) "943ce6579b0573eb104ddf192af3fcae")
(setf (get my_custom_pkg::CountingResult :datatype-) "my_custom_pkg/CountingResult")
(setf (get my_custom_pkg::CountingResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
int32[] final_numbers
string result_message

")



(provide :my_custom_pkg/CountingResult "943ce6579b0573eb104ddf192af3fcae")


